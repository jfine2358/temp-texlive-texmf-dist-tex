%%
%% This is file `paresse-old.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% paresse.dtx  (with options: `package,OLD')
%% 
%% Do not distribute this file without also distributing the
%% source files specified above.
%% 
%% Do not distribute a modified version of this file.
%% 
%% File: paresse.dtx
%% Copyright (C) 2020 Yvon Henel aka Le TeXnicien de surface
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
\RequirePackage{expl3}[2020/09/24]
\GetIdInfo$Id: paresse.dtx 5.0.1 2020-10-06 TdS $
  {}
\ProvidesExplPackage
  {\ExplFileName-old}{\ExplFileDate}{\ExplFileVersion}{\ExplFileDescription}
\RequirePackage{xparse}
\RequirePackage{l3keys2e}
\cs_if_exist:NF \__paresse_main_package_loaded:
{
\keys_define:nn {paresse}
{
  encoding_is_legacy .bool_set:N = \g__paresse_encoding_is_legacy_bool,
  encoding_is_levi .bool_set_inverse:N =
    \g__paresse_encoding_is_legacy_bool,
  legacy .meta:n = {
    encoding_is_legacy = #1
  },
  legacy .default:n = {true},
  legacy .initial:n = {true},
  levi .meta:n = {
    encoding_is_levi = #1
  },
  levi .default:n = {true},
  levi .initial:n = {false},

  mood_is_wild .bool_set:N = \g__paresse_mood_is_wild_bool,
  mood_is_tame .bool_set_inverse:N =
    \g__paresse_mood_is_wild_bool,
  wild .meta:n = {
    mood_is_wild = #1
  },
  wild .default:n = {true},
  wild .initial:n = {true},
  tame .meta:n = {
    mood_is_tame = #1
  },
  tame .default:n = {true},
  tame .initial:n = {false},

  letter_t_is_theta .bool_set:N = \g__paresse_letter_t_is_theta_bool,
  letter_t_is_tau .bool_set_inverse:N =
    \g__paresse_letter_t_is_theta_bool,
  ttheta .meta:n = {
    letter_t_is_theta = #1
  },
  ttheta .default:n = {true},
  ttheta .initial:n = {true},
  ttau .meta:n = {
    letter_t_is_tau = #1
  },
  ttau .default:n = {true},
  ttau .initial:n = {false},

  letter_theta_is_theta .bool_set:N = \g__paresse_letter_theta_is_theta_bool,
  letter_theta_is_vartheta .bool_set_inverse:N =
    \g__paresse_letter_theta_is_theta_bool,
  theta .meta:n = {
    letter_theta_is_theta = #1
  },
  theta .default:n = {true},
  theta .initial:n = {true},
  vartheta .meta:n = {
    letter_theta_is_vartheta = #1
  },
  vartheta .default:n = {true},
  vartheta .initial:n = {false},

  letter_pi_is_pi .bool_set:N = \g__paresse_letter_pi_is_pi_bool,
  letter_pi_is_varpi .bool_set_inverse:N =
    \g__paresse_letter_pi_is_pi_bool,
  pi .meta:n = {
    letter_pi_is_pi = #1
  },
  pi .default:n = {true},
  pi .initial:n = {true},
  varpi .meta:n = {
    letter_pi_is_varpi = #1
  },
  varpi .default:n = {true},
  varpi .initial:n = {false},

  letter_rho_is_rho .bool_set:N = \g__paresse_letter_rho_is_rho_bool,
  letter_rho_is_varrho .bool_set_inverse:N =
    \g__paresse_letter_rho_is_rho_bool,
  rho .meta:n = {
    letter_rho_is_rho = #1
  },
  rho .default:n = {true},
  rho .initial:n = {true},
  varrho .meta:n = {
    letter_rho_is_varrho = #1
  },
  varrho .default:n = {true},
  varrho .initial:n = {false},

  letter_sigma_is_sigma .bool_set:N = \g__paresse_letter_sigma_is_sigma_bool,
  letter_sigma_is_varsigma .bool_set_inverse:N =
    \g__paresse_letter_sigma_is_sigma_bool,
  sigma .meta:n = {
    letter_sigma_is_sigma = #1
  },
  sigma .default:n = {true},
  sigma .initial:n = {true},
  varsigma .meta:n = {
    letter_sigma_is_varsigma = #1
  },
  varsigma .default:n = {true},
  varsigma .initial:n = {false},

  letter_epsilon_is_epsilon .bool_set:N =
    \g__paresse_letter_epsilon_is_epsilon_bool,
  letter_epsilon_is_varepsilon .bool_set_inverse:N =
    \g__paresse_letter_epsilon_is_epsilon_bool,
  epsilon .meta:n = {
    letter_epsilon_is_epsilon = #1
  },
  epsilon .default:n = {true},
  epsilon .initial:n = {false},
  varepsilon .meta:n = {
    letter_epsilon_is_varepsilon = #1
  },
  varepsilon .default:n = {true},
  varepsilon .initial:n = {true},

  letter_phi_is_phi .bool_set:N = \g__paresse_letter_phi_is_phi_bool,
  letter_phi_is_varphi .bool_set_inverse:N =
    \g__paresse_letter_phi_is_phi_bool,
  phi .meta:n = {
    letter_phi_is_phi = #1
  },
  phi .default:n = {true},
  phi .initial:n = {false},
  varphi .meta:n = {
    letter_phi_is_varphi = #1
  },
  varphi .default:n = {true},
  varphi .initial:n = {true},
}
\ProcessKeysOptions {paresse}
\bool_if:nTF {\g__paresse_letter_epsilon_is_epsilon_bool}
{\cs_new:Npn \__paresse_epsilon {\epsilon}}
{\cs_new:Npn \__paresse_epsilon {\varepsilon}}

\bool_if:nTF {\g__paresse_letter_theta_is_theta_bool}
{\cs_new:Npn \__paresse_theta {\theta}}
{\cs_new:Npn \__paresse_theta {\vartheta}}

\bool_if:nTF {\g__paresse_letter_pi_is_pi_bool}
{\cs_new:Npn \__paresse_pi {\pi}}
{\cs_new:Npn \__paresse_pi {\varpi}}

\bool_if:nTF {\g__paresse_letter_rho_is_rho_bool}
{\cs_new:Npn \__paresse_rho {\rho}}
{\cs_new:Npn \__paresse_rho {\varrho}}

\bool_if:nTF {\g__paresse_letter_sigma_is_sigma_bool}
{\cs_new:Npn \__paresse_sigma {\sigma}}
{\cs_new:Npn \__paresse_sigma {\varsigma}}

\bool_if:nTF {\g__paresse_letter_phi_is_phi_bool}
{\cs_new:Npn \__paresse_phi {\phi}}
{\cs_new:Npn \__paresse_phi {\varphi}}

\bool_new:c {g__paresse_file_encoding_is_utf8_bool}
}
\count@=\catcode`\^^a7
\let\GA@LaVieilleParesse= ^^a7
\def\^^a7{\S}
\newcommand{\makeparesseletter}{\catcode `\^^a7=11\relax}
\newcommand{\makeparesseother}{\catcode `\^^a7=12\relax}
\newcommand{\GA@MakeParesseActive}{\catcode `\^^a7=\active}
\def\GA@ActiveLaParessexii{\catcode `\^^a7=\active}
\def\GA@ActiveLaParessexiii{\catcode `\^^a7=\active
  \def^^a7##1{\ensuremath{\csname \string^^a7##1\endcsname}}}
\ifnum\count@=12
  \let\GA@ActiveLaParesse \GA@ActiveLaParessexii
\else
  \let\GA@ActiveLaParesse \GA@ActiveLaParessexiii
\fi
\newcommand{\ActiveLaParesse}{\GA@ActiveLaParesse}
\newenvironment{ParesseActive}{\GA@ActiveLaParesse}{}

\makeparesseletter
\def\^^a7a {\alpha}
\def\^^a7b {\beta}
\def\^^a7g {\gamma}
\def\^^a7d {\delta}
\def\^^a7e {\__paresse_epsilon}
\def\^^a7z {\zeta}
\def\^^a7h {\eta}
\def\^^a7i {\iota}
\def\^^a7k {\kappa}
\def\^^a7l {\lambda}
\def\^^a7m {\mu}
\def\^^a7n {\nu}
\def\^^a7x {\xi}
\def\^^a7p {\__paresse_pi}
\def\^^a7r {\__paresse_rho}
\def\^^a7s {\__paresse_sigma}
\def\^^a7u {\upsilon}
\def\^^a7f {\__paresse_phi}
\def\^^a7w {\omega}

\bool_if:nTF {\g__paresse_encoding_is_legacy_bool}
{
  \def\^^a7j {\varsigma}
  \def\^^a7v {\__paresse_theta}
  \def\^^a7y {\tau}
  \def\^^a7c {\chi}
  \def\^^a7q {\psi}
  \bool_if:nTF {\g__paresse_letter_t_is_theta_bool}
  {
    \def\^^a7t {\__paresse_theta}
  }
  {
    \def\^^a7t {\tau}
  }
}
{
  \def\^^a7j {\__paresse_theta}
  \def\^^a7t {\tau}
  \def\^^a7q {\chi}
  \def\^^a7y {\psi}
  \def\^^a7c {\varsigma}
}
\def\^^a7G {\Gamma}
\def\^^a7D {\Delta}
\def\^^a7L {\Lambda}
\def\^^a7P {\Pi}
\def\^^a7S {\Sigma}
\def\^^a7U {\Upsilon}
\def\^^a7F {\Phi}
\def\^^a7X {\Xi}
\def\^^a7W {\Omega}
\bool_if:nTF {\g__paresse_encoding_is_legacy_bool}
{
  \def\^^a7V {\Theta}
  \def\^^a7T {\Theta}
  \def\^^a7Q {\Psi}
}
{
  \def\^^a7J {\Theta}
  \def\^^a7Y {\Psi}
}
\def\^^a7Z {\S}
\catcode `\^^a7=\active
\def^^a7#1{\ensuremath{\csname \string^^a7#1\endcsname}}

\bool_if:nF {\g__paresse_mood_is_wild_bool}
{
  \catcode`\^^a7=\count@
  \ifnum\count@=13 \let ^^a7=\GA@LaVieilleParesse \fi
}
\endinput
%%
%% End of file `paresse-old.sty'.
