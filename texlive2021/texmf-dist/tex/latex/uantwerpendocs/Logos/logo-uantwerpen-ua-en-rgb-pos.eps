%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 20.09.0 (http://poppler.freedesktop.org)
%%Creator: Adobe Illustrator(R) 24.3
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 145 43
%%HiResBoundingBox: 0 0 145 43
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 145 43 re
W
q
q
[0.1 0 0 0.1 0 0] cm
q
0 0 1444.52 425.195 re
W
/DeviceCMYK {} cs
[1 0.8555 0.3574 0.2217] sc
636.074 296.504 m
636.074 373.41 l
610.914 373.41 l
610.914 296.504 l
610.914 278.078 598.688 270.813 585.574 270.813 c
573.348 270.813 558.996 278.078 558.996 297.215 c
558.996 373.41 l
533.48 373.41 l
533.48 294.199 l
533.48 264.969 555.277 250.785 582.563 250.785 c
614.813 250.785 636.074 266.738 636.074 296.504 c
745.578 252.914 m
745.578 314.402 l
745.578 334.781 732.469 345.41 716.52 345.41 c
704.113 345.41 693.309 339.035 686.75 331.77 c
686.043 331.77 l
686.395 344.172 l
663.715 342.398 l
663.715 252.914 l
687.281 252.914 l
687.281 321.664 l
691.711 324.504 697.91 326.453 704.293 326.453 c
715.457 326.453 722.191 320.074 722.191 307.492 c
722.191 252.914 l
745.578 252.914 l
h
794.664 372.52 m
794.664 379.434 789.168 384.746 782.254 384.746 c
775.523 384.746 769.852 379.434 769.852 372.52 c
769.852 365.613 775.523 359.941 782.254 359.941 c
789.168 359.941 794.664 365.613 794.664 372.52 c
794.129 343.289 m
770.387 343.289 l
770.387 252.914 l
794.129 252.914 l
794.129 343.289 l
h
899.207 343.289 m
875.281 343.289 l
859.156 295.441 l
856.5 287.824 854.371 275.242 854.371 275.242 c
854.371 275.242 852.254 288 849.586 295.441 c
833.465 343.289 l
806.891 343.289 l
843.035 252.383 l
862.879 252.383 l
899.207 343.289 l
h
988.336 307.668 m
988.336 327.867 975.75 345.41 950.055 345.41 c
923.484 345.41 904.695 325.211 904.695 296.328 c
904.695 269.746 921.18 250.969 948.289 250.969 c
962.645 250.969 973.453 253.801 984.43 258.234 c
985.496 274.891 l
974.871 270.813 965.301 268.508 954.664 268.508 c
938.016 268.508 928.094 279.852 927.555 294.734 c
987.449 294.734 l
987.977 297.922 988.336 303.594 988.336 307.668 c
966.539 308.379 m
928.445 308.379 l
929.684 319.188 936.773 329.996 948.113 329.996 c
959.801 329.996 966.539 320.25 966.539 308.379 c
1063.64 342.574 m
1060.62 344.348 1055.85 345.41 1051.59 345.41 c
1041.84 345.41 1033.16 338.32 1028.55 328.223 c
1027.85 328.223 l
1028.55 344.348 l
1006.23 342.398 l
1006.23 252.914 l
1029.79 252.914 l
1029.79 317.594 l
1032.81 320.781 1038.12 323.086 1043.62 323.086 c
1049.28 323.086 1055.31 321.316 1059.92 318.652 c
1063.64 342.574 l
h
1136.64 280.559 m
1136.64 309.09 1095.53 306.25 1095.53 320.426 c
1095.53 325.566 1101.02 328.047 1107.4 328.047 c
1115.91 328.047 1125.12 325.566 1132.04 322.906 c
1134.69 339.918 l
1128.13 342.754 1118.21 345.41 1108.64 345.41 c
1089.33 345.41 1072.67 335.664 1072.67 317.414 c
1072.67 288.531 1113.61 291.719 1113.61 277.371 c
1113.61 270.813 1106.87 268.332 1099.43 268.332 c
1090.75 268.332 1080.65 271.168 1072.5 275.422 c
1069.84 257.703 l
1077.63 253.449 1087.03 250.969 1098.72 250.969 c
1119.45 250.969 1136.64 260.891 1136.64 280.559 c
1179.52 372.52 m
1179.52 379.434 1174.03 384.746 1167.12 384.746 c
1160.38 384.746 1154.71 379.434 1154.71 372.52 c
1154.71 365.613 1160.38 359.941 1167.12 359.941 c
1174.03 359.941 1179.52 365.613 1179.52 372.52 c
1178.99 343.289 m
1155.24 343.289 l
1155.24 252.914 l
1178.99 252.914 l
1178.99 343.289 l
h
1258.37 256.281 m
1258.37 272.586 l
1253.05 270.813 1247.57 270.281 1242.96 270.281 c
1234.27 270.281 1228.6 274.531 1228.6 284.102 c
1228.6 296.328 1228.95 325.211 1228.95 326.629 c
1257.66 326.629 l
1257.66 343.289 l
1228.95 343.289 l
1228.95 362.957 l
1226.66 362.957 l
1197.42 335.84 l
1197.42 326.629 l
1205.92 326.629 l
1205.92 319.012 l
1205.92 304.836 1205.39 281.266 1205.39 276.129 c
1205.39 260.891 1215.67 250.969 1231.62 250.969 c
1241.72 250.969 1250.75 253.094 1258.37 256.281 c
1352.81 343.289 m
1329.25 343.289 l
1314.01 296.328 l
1311.53 288.707 1308.86 275.953 1308.86 275.953 c
1308.86 275.953 1306.75 289.063 1304.26 296.328 c
1287.78 343.289 l
1261.21 343.289 l
1297 253.801 l
1292.04 242.105 1283.88 225.984 1271.66 225.984 c
1266.87 225.984 1262.62 226.867 1258.9 228.285 c
1255.18 211.277 l
1259.08 208.973 1265.46 207.199 1272.55 207.199 c
1294.52 207.199 1307.99 228.285 1317.56 252.742 c
1352.81 343.289 l
f
632.871 129.004 m
632.871 154.629 615.258 174.914 587.855 174.914 c
557.957 174.914 539.094 154.629 539.094 125.977 c
539.094 100.352 556.711 80.0586 584.113 80.0586 c
613.836 80.0586 632.871 100.352 632.871 129.004 c
608.676 126.691 m
608.676 110.5 599.598 97.5 586.254 97.5 c
572.371 97.5 563.473 111.563 563.473 128.117 c
563.473 144.484 572.016 157.473 585.715 157.473 c
599.777 157.473 608.676 143.418 608.676 126.691 c
704.414 218.512 m
700.676 220.469 694.27 222.254 688.219 222.254 c
668.469 222.254 653.699 209.617 653.699 188.801 c
653.699 172.785 l
642.309 170.109 l
642.309 155.695 l
653.699 155.695 l
653.699 82.0234 l
677.363 82.0234 l
677.363 155.695 l
699.43 155.695 l
699.43 172.785 l
677.363 172.785 l
677.363 189.863 l
677.363 200.188 682.703 204.277 689.465 204.277 c
693.383 204.277 697.652 203.215 701.031 201.965 c
704.414 218.512 l
h
856.383 82.0234 m
812.43 203.027 l
784.313 203.027 l
740.355 82.0234 l
766.512 82.0234 l
777.195 113.879 l
817.586 113.879 l
828.621 82.0234 l
856.383 82.0234 l
h
812.957 131.133 m
781.637 131.133 l
794.098 167.441 l
795.875 172.598 797.301 181.68 797.301 181.68 c
797.301 181.68 798.727 172.246 800.328 167.441 c
812.957 131.133 l
h
952.652 82.0234 m
952.652 143.77 l
952.652 164.238 939.488 174.914 923.473 174.914 c
911.012 174.914 900.164 168.508 893.57 161.211 c
892.859 161.211 l
893.219 173.672 l
870.438 171.887 l
870.438 82.0234 l
894.109 82.0234 l
894.109 151.066 l
898.563 153.918 904.781 155.871 911.188 155.871 c
922.398 155.871 929.168 149.465 929.168 136.836 c
929.168 82.0234 l
952.652 82.0234 l
h
1030.95 85.4023 m
1030.95 101.777 l
1025.62 99.9922 1020.1 99.4648 1015.48 99.4648 c
1006.76 99.4648 1001.06 103.73 1001.06 113.34 c
1001.06 125.625 1001.41 154.629 1001.41 156.055 c
1030.24 156.055 l
1030.24 172.785 l
1001.41 172.785 l
1001.41 192.531 l
999.098 192.531 l
969.742 165.305 l
969.742 156.055 l
978.277 156.055 l
978.277 148.398 l
978.277 134.16 977.75 110.5 977.75 105.332 c
977.75 90.0313 988.074 80.0586 1004.09 80.0586 c
1014.23 80.0586 1023.31 82.1992 1030.95 85.4023 c
1177.77 172.785 m
1154.45 172.785 l
1141.82 128.293 l
1139.51 120.996 1137.55 107.648 1137.55 107.648 c
1137.55 107.648 1135.42 120.637 1132.57 127.93 c
1116.01 172.785 l
1098.57 172.785 l
1082.74 127.93 l
1080.24 120.637 1077.58 107.297 1077.58 107.297 c
1077.58 107.297 1075.44 120.996 1073.31 128.117 c
1060.5 172.785 l
1034.51 172.785 l
1065.65 81.4844 l
1083.98 81.4844 l
1100.71 126.516 l
1103.2 133.633 1105.88 145.371 1105.88 145.371 c
1105.88 145.371 1107.65 133.449 1110.32 126.516 c
1127.59 81.4844 l
1146.44 81.4844 l
1177.77 172.785 l
h
1268.7 137.012 m
1268.7 157.297 1256.06 174.914 1230.26 174.914 c
1203.57 174.914 1184.7 154.629 1184.7 125.625 c
1184.7 98.9258 1201.26 80.0586 1228.48 80.0586 c
1242.9 80.0586 1253.75 82.9102 1264.78 87.3633 c
1265.86 104.094 l
1255.17 99.9922 1245.56 97.6875 1234.89 97.6875 c
1218.16 97.6875 1208.19 109.074 1207.66 124.023 c
1267.81 124.023 l
1268.35 127.227 1268.7 132.922 1268.7 137.012 c
1246.81 137.727 m
1208.55 137.727 l
1209.79 148.574 1216.91 159.434 1228.31 159.434 c
1240.05 159.434 1246.81 149.648 1246.81 137.727 c
1344.33 172.07 m
1341.31 173.848 1336.5 174.914 1332.22 174.914 c
1322.44 174.914 1313.72 167.793 1309.09 157.656 c
1308.39 157.656 l
1309.09 173.848 l
1286.67 171.887 l
1286.67 82.0234 l
1310.34 82.0234 l
1310.34 146.973 l
1313.37 150.176 1318.7 152.492 1324.22 152.492 c
1329.91 152.492 1335.96 150.715 1340.59 148.047 c
1344.33 172.07 l
h
1444.52 130.605 m
1444.52 155.871 1430.28 174.914 1407.86 174.914 c
1397.71 174.914 1387.39 169.582 1380.81 161.563 c
1380.09 161.563 l
1380.46 173.672 l
1357.67 171.887 l
1357.67 36.6406 l
1381.34 36.6406 l
1381.34 83.625 l
1384.36 82.0234 1389.88 80.7734 1394.87 80.7734 c
1425.11 80.7734 1444.52 100.703 1444.52 130.605 c
1420.5 126.516 m
1420.5 109.961 1411.59 97.5 1395.93 97.5 c
1390.77 97.5 1384.72 99.1016 1381.34 101.418 c
1381.34 151.426 l
1385.44 154.27 1391.48 156.23 1397.54 156.23 c
1411.41 156.23 1420.5 145.02 1420.5 126.516 c
f
/DeviceCMYK {} cs
[0 0.9141 0.7363 0] sc
403.938 0 m
21.2617 0 l
9.56641 0 0.003906 9.57031 0.003906 21.2617 c
0.003906 403.938 l
0.003906 415.633 9.56641 425.195 21.2617 425.195 c
403.938 425.195 l
415.633 425.195 425.195 415.633 425.195 403.938 c
425.195 21.2617 l
425.195 9.57031 415.633 0 403.938 0 c
f
/DeviceCMYK {} cs
[0 0 0 0] sc
272.789 200 m
274.594 148.586 253.453 111.418 206.863 111.418 c
170.578 111.418 133.84 138.594 133.84 192.5 c
133.84 337.051 l
74.0938 337.051 l
74.0938 189.465 l
74.0938 133.555 111.535 76.2227 197.801 76.2227 c
281.531 76.2227 315.223 136.309 315.598 186.145 c
376.734 176.719 404.758 222.336 396.766 253.395 c
386.09 241.063 369.016 230.145 315.672 245.27 c
315.672 337.051 l
272.789 337.051 l
272.789 259.813 l
189.016 287.313 169.188 210.992 169.188 210.992 c
169.188 210.992 208.367 232.539 272.789 200 c
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
