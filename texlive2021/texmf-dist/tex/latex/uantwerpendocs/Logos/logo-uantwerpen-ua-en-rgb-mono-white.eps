%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 20.09.0 (http://poppler.freedesktop.org)
%%Creator: Adobe Illustrator(R) 24.2
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 145 43
%%HiResBoundingBox: 0 0 145 43
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 145 43 re
W
q
q
[0.1 0 0 0.1 0 0] cm
q
0 0 1444.5 425.199 re
W
/DeviceCMYK {} cs
[0 0 0 0] sc
1329.2 343.301 m
1314 296.398 l
1311.5 288.699 1308.8 276 1308.8 276 c
1308.8 276 1306.7 289.102 1304.2 296.398 c
1287.7 343.301 l
1261.2 343.301 l
1296.9 253.801 l
1292 242.098 1283.8 226 1271.6 226 c
1266.8 226 1262.6 226.898 1258.9 228.301 c
1255.1 211.301 l
1259 208.996 1265.4 207.199 1272.5 207.199 c
1294.5 207.199 1307.9 228.301 1317.5 252.801 c
1352.8 343.301 l
1329.2 343.301 l
h
1242.9 270.301 m
1234.2 270.301 1228.6 274.598 1228.6 284.102 c
1228.6 296.398 1228.9 325.199 1228.9 326.699 c
1257.6 326.699 l
1257.6 343.301 l
1228.9 343.301 l
1228.9 363 l
1226.6 363 l
1197.4 335.902 l
1197.4 326.699 l
1205.9 326.699 l
1205.9 318.996 l
1205.9 304.902 1205.3 281.301 1205.3 276.199 c
1205.3 260.902 1215.6 251 1231.6 251 c
1241.7 251 1250.7 253.098 1258.3 256.301 c
1258.3 272.602 l
1253 270.801 1247.5 270.301 1242.9 270.301 c
h
1155.2 343.301 m
1155.2 252.898 l
1178.9 252.898 l
1178.9 343.301 l
1155.2 343.301 l
h
1167.1 384.797 m
1160.3 384.797 1154.7 379.5 1154.7 372.602 c
1154.7 365.598 1160.3 360 1167.1 360 c
1174 360 1179.5 365.598 1179.5 372.602 c
1179.5 379.5 1174 384.797 1167.1 384.797 c
h
1095.5 320.504 m
1095.5 325.598 1101 328.098 1107.4 328.098 c
1115.9 328.098 1125.1 325.598 1132 322.898 c
1134.6 340 l
1128.1 342.801 1118.2 345.398 1108.6 345.398 c
1089.3 345.398 1072.6 335.703 1072.6 317.402 c
1072.6 288.598 1113.6 291.801 1113.6 277.402 c
1113.6 270.801 1106.8 268.402 1099.4 268.402 c
1090.7 268.402 1080.6 271.199 1072.4 275.504 c
1069.8 257.699 l
1077.6 253.5 1087 251 1098.7 251 c
1119.4 251 1136.6 260.902 1136.6 280.598 c
1136.6 309.102 1095.5 306.301 1095.5 320.504 c
h
1051.5 345.398 m
1041.8 345.398 1033.1 338.402 1028.5 328.301 c
1027.8 328.301 l
1028.5 344.398 l
1006.2 342.402 l
1006.2 252.898 l
1029.7 252.898 l
1029.7 317.602 l
1032.8 320.801 1038.1 323.098 1043.6 323.098 c
1049.2 323.098 1055.3 321.301 1059.9 318.699 c
1063.6 342.602 l
1060.6 344.398 1055.8 345.398 1051.5 345.398 c
h
928.395 308.402 m
929.598 319.199 936.695 330 948.102 330 c
959.801 330 966.5 320.301 966.5 308.402 c
928.395 308.402 l
h
988.297 307.699 m
988.297 327.898 975.699 345.398 950 345.398 c
923.395 345.398 904.598 325.199 904.598 296.398 c
904.598 269.797 921.102 251 948.199 251 c
962.605 251 973.395 253.801 984.402 258.301 c
985.496 274.902 l
974.801 270.801 965.203 268.5 954.598 268.5 c
937.996 268.5 927.996 279.902 927.5 294.797 c
987.398 294.797 l
987.898 298.004 988.297 303.598 988.297 307.699 c
h
875.203 343.301 m
859.098 295.504 l
856.5 287.898 854.305 275.301 854.305 275.301 c
854.305 275.301 852.203 288.004 849.5 295.504 c
833.395 343.301 l
806.805 343.301 l
842.996 252.402 l
862.801 252.402 l
899.195 343.301 l
875.203 343.301 l
h
770.301 343.301 m
770.301 252.898 l
794.098 252.898 l
794.098 343.301 l
770.301 343.301 l
h
782.203 384.797 m
775.496 384.797 769.801 379.5 769.801 372.602 c
769.801 365.598 775.496 360 782.203 360 c
789.098 360 794.598 365.598 794.598 372.602 c
794.598 379.5 789.098 384.797 782.203 384.797 c
h
716.5 345.398 m
704.098 345.398 693.297 339.102 686.703 331.801 c
686 331.801 l
686.301 344.199 l
663.699 342.402 l
663.699 252.898 l
687.199 252.898 l
687.199 321.699 l
691.703 324.5 697.898 326.496 704.203 326.496 c
715.398 326.496 722.102 320.102 722.102 307.5 c
722.102 252.898 l
745.5 252.898 l
745.5 314.398 l
745.5 334.797 732.398 345.398 716.5 345.398 c
h
610.902 373.402 m
610.902 296.496 l
610.902 278.098 598.602 270.801 585.5 270.801 c
573.297 270.801 558.898 278.098 558.898 297.199 c
558.898 373.402 l
533.402 373.402 l
533.402 294.199 l
533.402 265 555.203 250.801 582.5 250.801 c
614.801 250.801 636 266.801 636 296.496 c
636 373.402 l
610.902 373.402 l
f
1395.9 97.5039 m
1390.7 97.5039 1384.7 99.0938 1381.3 101.496 c
1381.3 151.496 l
1385.4 154.301 1391.4 156.301 1397.5 156.301 c
1411.4 156.301 1420.4 145.102 1420.4 126.496 c
1420.4 110.004 1411.5 97.5039 1395.9 97.5039 c
h
1407.8 174.895 m
1397.7 174.895 1387.3 169.602 1380.8 161.594 c
1380 161.594 l
1380.4 173.695 l
1357.6 171.898 l
1357.6 36.7031 l
1381.3 36.7031 l
1381.3 83.6953 l
1384.3 82.1016 1389.8 80.8047 1394.8 80.8047 c
1425.1 80.8047 1444.5 100.695 1444.5 130.598 c
1444.5 155.902 1430.2 174.895 1407.8 174.895 c
h
1332.2 174.895 m
1322.4 174.895 1313.7 167.797 1309 157.699 c
1308.3 157.699 l
1309 173.898 l
1286.6 171.898 l
1286.6 82.1016 l
1310.3 82.1016 l
1310.3 146.996 l
1313.3 150.199 1318.7 152.504 1324.2 152.504 c
1329.9 152.504 1335.9 150.695 1340.5 148.098 c
1344.3 172.102 l
1341.3 173.898 1336.4 174.895 1332.2 174.895 c
h
1208.5 137.797 m
1209.7 148.598 1216.9 159.496 1228.3 159.496 c
1240 159.496 1246.8 149.699 1246.8 137.797 c
1208.5 137.797 l
h
1268.7 136.996 m
1268.7 157.297 1256 174.895 1230.2 174.895 c
1203.5 174.895 1184.7 154.699 1184.7 125.695 c
1184.7 98.9961 1201.2 80.1016 1228.4 80.1016 c
1242.8 80.1016 1253.7 82.9023 1264.7 87.3945 c
1265.8 104.094 l
1255.1 100.004 1245.5 97.6992 1234.8 97.6992 c
1218.1 97.6992 1208.1 109.094 1207.6 124.094 c
1267.8 124.094 l
1268.3 127.297 1268.7 132.902 1268.7 136.996 c
h
1154.4 172.797 m
1141.8 128.305 l
1139.5 121 1137.5 107.699 1137.5 107.699 c
1137.5 107.699 1135.4 120.695 1132.5 128.004 c
1116 172.797 l
1098.5 172.797 l
1082.7 128.004 l
1080.2 120.695 1077.5 107.297 1077.5 107.297 c
1077.5 107.297 1075.4 121 1073.3 128.098 c
1060.4 172.797 l
1034.5 172.797 l
1065.6 81.4961 l
1083.9 81.4961 l
1100.7 126.496 l
1103.2 133.695 1105.8 145.402 1105.8 145.402 c
1105.8 145.402 1107.6 133.5 1110.3 126.496 c
1127.5 81.4961 l
1146.4 81.4961 l
1177.7 172.797 l
1154.4 172.797 l
h
1015.4 99.4961 m
1006.7 99.4961 1001 103.801 1001 113.402 c
1001 125.695 1001.4 154.699 1001.4 156.098 c
1030.2 156.098 l
1030.2 172.797 l
1001.4 172.797 l
1001.4 192.602 l
999.098 192.602 l
969.703 165.297 l
969.703 156.098 l
978.199 156.098 l
978.199 148.402 l
978.199 134.203 977.703 110.504 977.703 105.402 c
977.703 90.1016 987.996 80.1016 1004 80.1016 c
1014.2 80.1016 1023.3 82.1992 1030.9 85.4023 c
1030.9 101.801 l
1025.6 100.004 1020.1 99.4961 1015.4 99.4961 c
h
923.395 174.895 m
911.004 174.895 900.105 168.5 893.504 161.195 c
892.801 161.195 l
893.199 173.695 l
870.398 171.898 l
870.398 82.1016 l
894.098 82.1016 l
894.098 151.098 l
898.504 153.898 904.703 155.902 911.102 155.902 c
922.398 155.902 929.098 149.496 929.098 136.898 c
929.098 82.1016 l
952.605 82.1016 l
952.605 143.801 l
952.605 164.301 939.402 174.895 923.395 174.895 c
h
781.598 131.195 m
794 167.504 l
795.797 172.602 797.301 181.703 797.301 181.703 c
797.301 181.703 798.699 172.297 800.301 167.504 c
812.898 131.195 l
781.598 131.195 l
h
812.398 203.098 m
784.305 203.098 l
740.301 82.1016 l
766.5 82.1016 l
777.098 113.898 l
817.5 113.898 l
828.602 82.1016 l
856.297 82.1016 l
812.398 203.098 l
h
689.402 204.301 m
693.297 204.301 697.602 203.195 701 201.996 c
704.402 218.5 l
700.602 220.504 694.203 222.297 688.199 222.297 c
668.402 222.297 653.602 209.598 653.602 188.801 c
653.602 172.797 l
642.301 170.102 l
642.301 155.695 l
653.602 155.695 l
653.602 82.1016 l
677.301 82.1016 l
677.301 155.695 l
699.402 155.695 l
699.402 172.797 l
677.301 172.797 l
677.301 189.895 l
677.301 200.199 682.703 204.301 689.402 204.301 c
h
586.199 97.5039 m
572.301 97.5039 563.402 111.594 563.402 128.098 c
563.402 144.496 572 157.504 585.699 157.504 c
599.699 157.504 608.602 143.402 608.602 126.703 c
608.602 110.504 599.5 97.5039 586.199 97.5039 c
h
587.801 174.895 m
557.898 174.895 539 154.699 539 126 c
539 100.402 556.703 80.1016 584.098 80.1016 c
613.801 80.1016 632.801 100.402 632.801 128.996 c
632.801 154.699 615.203 174.895 587.801 174.895 c
f
315.602 186.195 m
315.203 136.301 281.5 76.3008 197.801 76.3008 c
111.5 76.3008 74 133.598 74 189.496 c
74 337.098 l
133.801 337.098 l
133.801 192.504 l
133.801 138.598 170.5 111.398 206.801 111.398 c
253.402 111.398 274.5 148.598 272.703 200.004 c
210.602 231.398 171.902 212.5 169.203 211.098 c
170.102 214.5 191 286.699 272.703 259.797 c
272.703 337.098 l
315.602 337.098 l
315.602 245.301 l
369 230.199 386 241.098 396.703 253.402 c
404.699 222.402 376.703 176.801 315.602 186.195 c
h
403.898 425.199 m
21.1992 425.199 l
9.5 425.199 -0.003906 415.703 -0.003906 403.996 c
-0.003906 21.3008 l
-0.003906 9.60156 9.5 0.003906 21.1992 0.003906 c
403.898 0.003906 l
415.602 0.003906 425.102 9.60156 425.102 21.3008 c
425.102 403.996 l
425.102 415.703 415.602 425.199 403.898 425.199 c
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
