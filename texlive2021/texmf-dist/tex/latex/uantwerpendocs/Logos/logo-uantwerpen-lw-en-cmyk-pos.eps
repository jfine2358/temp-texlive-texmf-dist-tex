%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 20.09.0 (http://poppler.freedesktop.org)
%%Creator: Adobe Illustrator(R) 25.0
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 390 103
%%HiResBoundingBox: 0 0 390 103
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 390 103 re
W
q
q
[0.1 0 0 0.1 0 0] cm
q
0 0 3897 1020.47 re
W
[/Separation (LW C=0 M=27 Y=85 K=0) /DeviceCMYK
{dup 0 mul exch dup 0.27 mul exch dup 0.85 mul exch 0 mul }
] {} cs
[1] sc
[1] sc
969.449 0 m
51.0234 0 l
22.9609 0 0 22.957 0 51.0234 c
0 969.445 l
0 997.512 22.9609 1020.47 51.0234 1020.47 c
969.449 1020.47 l
997.512 1020.47 1020.47 997.512 1020.47 969.445 c
1020.47 51.0234 l
1020.47 22.957 997.512 0 969.449 0 c
f
/DeviceCMYK {} cs
[0 0 0 0] sc
654.695 479.996 m
659.023 356.609 608.293 267.398 496.473 267.398 c
409.387 267.398 321.215 332.629 321.215 461.992 c
321.215 808.93 l
177.82 808.93 l
177.82 454.711 l
177.82 320.539 267.688 182.934 474.719 182.934 c
675.672 182.934 756.527 327.145 757.438 446.734 c
904.16 424.121 971.418 533.602 952.238 608.141 c
926.617 578.547 885.637 552.348 757.613 588.648 c
757.613 808.93 l
654.695 808.93 l
654.695 623.547 l
453.633 689.547 406.051 506.375 406.051 506.375 c
406.051 506.375 500.086 558.09 654.695 479.996 c
f
/DeviceCMYK {} cs
[1 0.8926 0.3249 0.2324] sc
1354.22 603.766 m
1313.75 603.766 1281.44 624.781 1281.44 668.141 c
1281.44 785.594 l
1319.27 785.594 l
1319.27 672.613 l
1319.27 644.234 1340.56 633.453 1358.69 633.453 c
1378.13 633.453 1396.26 644.234 1396.26 671.559 c
1396.26 785.594 l
1433.58 785.594 l
1433.58 671.559 l
1433.58 627.418 1402.05 603.766 1354.22 603.766 c
f
1561.32 606.922 m
1561.32 687.848 l
1561.32 706.5 1551.34 715.965 1534.79 715.965 c
1525.33 715.965 1516.14 713.074 1509.57 708.863 c
1509.57 606.922 l
1474.61 606.922 l
1474.61 739.605 l
1508.25 742.242 l
1507.73 723.844 l
1508.77 723.844 l
1518.5 734.625 1534.53 744.078 1552.92 744.078 c
1576.57 744.078 1596.01 728.316 1596.01 698.102 c
1596.01 606.922 l
1561.32 606.922 l
f
1632.84 606.922 m
1632.84 740.926 l
1668.05 740.926 l
1668.05 606.922 l
1632.84 606.922 l
h
1650.44 765.621 m
1640.45 765.621 1632.05 774.039 1632.05 784.273 c
1632.05 794.527 1640.45 802.41 1650.44 802.41 c
1660.69 802.41 1668.83 794.527 1668.83 784.273 c
1668.83 774.039 1660.69 765.621 1650.44 765.621 c
f
1770.01 606.129 m
1740.58 606.129 l
1686.98 740.926 l
1726.39 740.926 l
1750.31 669.977 l
1754.24 658.941 1757.4 640.027 1757.4 640.027 c
1757.4 640.027 1760.55 658.688 1764.5 669.977 c
1788.4 740.926 l
1823.87 740.926 l
1770.01 606.129 l
f
1896.43 721.219 m
1879.61 721.219 1869.11 705.191 1867.27 689.156 c
1923.75 689.156 l
1923.75 706.773 1913.77 721.219 1896.43 721.219 c
h
1954.76 668.934 m
1865.95 668.934 l
1866.74 646.863 1881.46 630.047 1906.16 630.047 c
1921.92 630.047 1936.11 633.453 1951.87 639.508 c
1950.3 614.801 l
1934.01 608.238 1917.98 604.031 1896.69 604.031 c
1856.49 604.031 1832.06 631.883 1832.06 671.297 c
1832.06 714.129 1859.91 744.078 1899.32 744.078 c
1937.43 744.078 1956.08 718.063 1956.08 688.113 c
1956.08 682.066 1955.55 673.66 1954.76 668.934 c
f
2062.27 704.402 m
2055.43 708.348 2046.51 710.973 2038.1 710.973 c
2029.96 710.973 2022.07 707.555 2017.6 702.828 c
2017.6 606.922 l
1982.65 606.922 l
1982.65 739.605 l
2015.77 742.496 l
2014.71 718.59 l
2015.77 718.59 l
2022.59 733.57 2035.47 744.078 2049.92 744.078 c
2056.23 744.078 2063.32 742.496 2067.79 739.879 c
2062.27 704.402 l
f
2119.84 604.031 m
2102.49 604.031 2088.57 607.711 2077.01 614.02 c
2080.95 640.289 l
2093.03 633.98 2108.01 629.781 2120.89 629.781 c
2131.93 629.781 2141.91 633.453 2141.91 643.18 c
2141.91 664.469 2081.22 659.734 2081.22 702.566 c
2081.22 729.625 2105.91 744.078 2134.56 744.078 c
2148.74 744.078 2163.45 740.133 2173.18 735.934 c
2169.23 710.711 l
2158.99 714.645 2145.33 718.328 2132.71 718.328 c
2123.26 718.328 2115.11 714.645 2115.11 707.027 c
2115.11 686.012 2176.07 690.211 2176.07 647.906 c
2176.07 618.746 2150.58 604.031 2119.84 604.031 c
f
2203.68 606.922 m
2203.68 740.926 l
2238.89 740.926 l
2238.89 606.922 l
2203.68 606.922 l
h
2221.28 765.621 m
2211.29 765.621 2202.89 774.039 2202.89 784.273 c
2202.89 794.527 2211.29 802.41 2221.28 802.41 c
2231.53 802.41 2239.67 794.527 2239.67 784.273 c
2239.67 774.039 2231.53 765.621 2221.28 765.621 c
f
2316.95 604.031 m
2293.31 604.031 2278.06 618.746 2278.06 641.344 c
2278.06 648.961 2278.85 683.902 2278.85 704.93 c
2278.85 716.227 l
2266.24 716.227 l
2266.24 729.891 l
2309.59 770.094 l
2313.01 770.094 l
2313.01 740.926 l
2355.57 740.926 l
2355.57 716.227 l
2313.01 716.227 l
2313.01 714.129 2312.49 671.297 2312.49 653.16 c
2312.49 638.98 2320.89 632.672 2333.76 632.672 c
2340.6 632.672 2348.74 633.453 2356.63 636.09 c
2356.63 611.91 l
2345.33 607.184 2331.93 604.031 2316.95 604.031 c
f
2444.41 606.656 m
2430.22 570.398 2410.25 539.129 2377.67 539.129 c
2367.16 539.129 2357.7 541.754 2351.92 545.172 c
2357.44 570.398 l
2362.95 568.297 2369.26 566.98 2376.35 566.98 c
2394.49 566.98 2406.58 590.895 2413.93 608.238 c
2360.85 740.926 l
2400.27 740.926 l
2424.7 671.297 l
2428.38 660.523 2431.54 641.082 2431.54 641.082 c
2431.54 641.082 2435.47 659.996 2439.15 671.297 c
2461.75 740.926 l
2496.69 740.926 l
2444.41 606.656 l
f
2628.65 718.328 m
2608.41 718.328 2595.8 699.148 2595.8 674.977 c
2595.8 650.543 2608.94 629.781 2629.43 629.781 c
2649.14 629.781 2662.54 648.961 2662.54 672.867 c
2662.54 697.574 2649.4 718.328 2628.65 718.328 c
h
2626.27 604.031 m
2585.82 604.031 2559.8 633.98 2559.8 671.824 c
2559.8 714.129 2587.65 744.078 2631.79 744.078 c
2672.26 744.078 2698.28 714.129 2698.28 676.285 c
2698.28 633.98 2670.16 604.031 2626.27 604.031 c
f
2798.95 784.02 m
2793.96 785.855 2787.65 787.438 2781.87 787.438 c
2771.88 787.438 2764 781.395 2764 766.148 c
2764 740.926 l
2796.59 740.926 l
2796.59 715.699 l
2764 715.699 l
2764 606.922 l
2729.06 606.922 l
2729.06 715.699 l
2712.24 715.699 l
2712.24 736.988 l
2729.06 740.926 l
2729.06 764.578 l
2729.06 795.32 2750.86 813.973 2780.03 813.973 c
2788.96 813.973 2798.42 811.344 2803.94 808.453 c
2798.95 784.02 l
f
2945.6 733.043 m
2943.24 740.133 2941.13 754.059 2941.13 754.059 c
2941.13 754.059 2939.03 740.66 2936.4 733.043 c
2918.01 679.441 l
2964.25 679.441 l
2945.6 733.043 l
h
2987.38 606.922 m
2971.09 653.953 l
2911.44 653.953 l
2895.68 606.922 l
2857.05 606.922 l
2921.95 785.594 l
2963.46 785.594 l
3028.36 606.922 l
2987.38 606.922 l
f
3135.87 606.922 m
3135.87 687.848 l
3135.87 706.5 3125.89 715.965 3109.34 715.965 c
3099.88 715.965 3090.69 713.074 3084.12 708.863 c
3084.12 606.922 l
3049.16 606.922 l
3049.16 739.605 l
3082.8 742.242 l
3082.28 723.844 l
3083.32 723.844 l
3093.05 734.625 3109.08 744.078 3127.48 744.078 c
3151.12 744.078 3170.56 728.316 3170.56 698.102 c
3170.56 606.922 l
3135.87 606.922 l
f
3246.54 604.031 m
3222.9 604.031 3207.65 618.746 3207.65 641.344 c
3207.65 648.961 3208.44 683.902 3208.44 704.93 c
3208.44 716.227 l
3195.82 716.227 l
3195.82 729.891 l
3239.18 770.094 l
3242.6 770.094 l
3242.6 740.926 l
3285.16 740.926 l
3285.16 716.227 l
3242.6 716.227 l
3242.6 714.129 3242.07 671.297 3242.07 653.16 c
3242.07 638.98 3250.48 632.672 3263.35 632.672 c
3270.19 632.672 3278.33 633.453 3286.22 636.09 c
3286.22 611.91 l
3274.92 607.184 3261.52 604.031 3246.54 604.031 c
f
3456.77 606.129 m
3428.92 606.129 l
3403.43 672.613 l
3399.49 682.859 3396.86 700.465 3396.86 700.465 c
3396.86 700.465 3392.91 683.121 3389.24 672.613 c
3364.54 606.129 l
3337.48 606.129 l
3291.5 740.926 l
3329.86 740.926 l
3348.77 674.977 l
3351.93 664.469 3355.08 644.234 3355.08 644.234 c
3355.08 644.234 3359.02 663.941 3362.7 674.715 c
3386.09 740.926 l
3411.84 740.926 l
3436.27 674.715 l
3440.47 663.941 3443.63 644.762 3443.63 644.762 c
3443.63 644.762 3446.52 664.469 3449.94 675.23 c
3468.59 740.926 l
3503.01 740.926 l
3456.77 606.129 l
f
3577.69 721.219 m
3560.87 721.219 3550.37 705.191 3548.53 689.156 c
3605.01 689.156 l
3605.01 706.773 3595.03 721.219 3577.69 721.219 c
h
3636.02 668.934 m
3547.21 668.934 l
3548 646.863 3562.72 630.047 3587.42 630.047 c
3603.18 630.047 3617.37 633.453 3633.13 639.508 c
3631.56 614.801 l
3615.27 608.238 3599.24 604.031 3577.95 604.031 c
3537.75 604.031 3513.32 631.883 3513.32 671.297 c
3513.32 714.129 3541.17 744.078 3580.58 744.078 c
3618.69 744.078 3637.34 718.063 3637.34 688.113 c
3637.34 682.066 3636.81 673.66 3636.02 668.934 c
f
3743.52 704.402 m
3736.68 708.348 3727.76 710.973 3719.35 710.973 c
3711.21 710.973 3703.32 707.555 3698.85 702.828 c
3698.85 606.922 l
3663.9 606.922 l
3663.9 739.605 l
3697.02 742.496 l
3695.96 718.59 l
3697.02 718.59 l
3703.84 733.57 3716.72 744.078 3731.17 744.078 c
3737.48 744.078 3744.57 742.496 3749.04 739.879 c
3743.52 704.402 l
f
3827.62 716.492 m
3818.7 716.492 3809.76 713.602 3803.72 709.391 c
3803.72 635.563 l
3808.71 632.145 3817.64 629.781 3825.26 629.781 c
3848.38 629.781 3861.52 648.18 3861.52 672.613 c
3861.52 699.938 3848.12 716.492 3827.62 716.492 c
h
3823.69 605.074 m
3816.32 605.074 3808.18 606.922 3803.72 609.285 c
3803.72 539.918 l
3768.76 539.918 l
3768.76 739.605 l
3802.4 742.242 l
3801.88 724.371 l
3802.92 724.371 l
3812.65 736.199 3827.89 744.078 3842.87 744.078 c
3875.97 744.078 3897 715.965 3897 678.648 c
3897 634.508 3868.35 605.074 3823.69 605.074 c
f
1510.67 233.465 m
1510.67 452.242 l
1598.18 452.242 l
1598.18 427.73 l
1536.92 427.73 l
1536.92 351.422 l
1585.23 351.422 l
1585.23 326.93 l
1536.92 326.93 l
1536.92 233.465 l
1510.67 233.465 l
f
1672.04 313.621 m
1645.08 309.07 1634.93 292.613 1634.93 275.113 c
1634.93 260.066 1642.28 252.711 1652.43 252.711 c
1659.78 252.711 1667.13 260.418 1672.04 268.473 c
1672.04 313.621 l
h
1706.68 230.309 m
1688.83 228.219 1677.63 233.465 1673.43 246.766 c
1672.04 246.766 l
1667.13 236.969 1658.03 228.914 1642.63 228.914 c
1624.08 228.914 1609.38 247.117 1609.38 272.32 c
1609.38 301.715 1628.28 328.668 1672.04 332.527 c
1672.04 346.871 l
1672.04 363.68 1666.08 375.582 1650.33 375.582 c
1640.88 375.582 1627.58 367.879 1617.43 357.027 c
1613.58 380.484 l
1623.37 391.676 1639.83 398.336 1653.48 398.336 c
1683.93 398.336 1696.89 373.824 1696.89 347.926 c
1696.89 262.867 l
1696.89 254.82 1700.03 251.316 1708.78 251.316 c
1706.68 230.309 l
f
1821.48 243.961 m
1813.43 234.508 1801.88 228.914 1787.88 228.914 c
1754.27 228.914 1735.02 257.613 1735.02 313.277 c
1735.02 368.57 1754.62 398.336 1789.28 398.336 c
1802.93 398.336 1813.43 393.082 1821.83 384.332 c
1815.88 359.48 l
1810.28 368.57 1799.43 375.934 1790.68 375.934 c
1769.68 375.934 1760.92 354.578 1760.92 313.621 c
1760.92 271.617 1770.02 251.316 1791.73 251.316 c
1800.83 251.316 1809.23 258.316 1815.88 267.77 c
1821.48 243.961 l
f
1919.84 229.605 m
1919.84 250.27 l
1911.43 235.914 1897.79 228.914 1885.53 228.914 c
1864.53 228.914 1852.98 248.16 1852.98 269.168 c
1852.98 393.785 l
1877.83 393.785 l
1877.83 274.07 l
1877.83 259.371 1884.14 253.063 1894.28 253.063 c
1902.68 253.063 1911.78 261.109 1919.84 271.617 c
1919.84 393.785 l
1944.69 393.785 l
1944.69 234.156 l
1919.84 229.605 l
f
1985.62 233.465 m
1985.62 469.391 l
2010.47 473.941 l
2010.47 233.465 l
1985.62 233.465 l
f
2112.34 236.266 m
2105.69 231.715 2096.24 228.914 2089.23 228.914 c
2071.38 228.914 2054.23 238.016 2054.23 278.621 c
2054.23 369.625 l
2038.13 371.383 l
2038.13 388.18 l
2054.23 394.48 l
2054.23 430.535 l
2079.09 430.535 l
2079.09 393.785 l
2111.29 393.785 l
2109.89 371.383 l
2079.09 371.383 l
2079.09 276.168 l
2079.09 257.613 2085.39 251.668 2093.44 251.668 c
2098.69 251.668 2104.99 255.172 2109.18 259.02 c
2112.34 236.266 l
f
2170.78 234.156 m
2129.12 393.785 l
2153.97 393.785 l
2182.33 275.465 l
2209.62 393.785 l
2234.48 393.785 l
2180.57 185.504 l
2174.62 162.75 2161.32 150.504 2146.27 150.504 c
2138.92 150.504 2131.22 152.957 2123.17 158.902 c
2128.42 180.953 l
2134.72 175.711 2139.97 173.258 2144.52 173.258 c
2151.18 173.258 2156.42 177.809 2159.22 189.012 c
2170.78 234.156 l
f
2395.48 313.277 m
2395.48 355.27 2387.08 375.934 2368.88 375.934 c
2350.68 375.934 2342.62 354.578 2342.62 313.621 c
2342.62 271.617 2350.68 251.316 2368.88 251.316 c
2387.08 251.316 2395.48 273.023 2395.48 313.277 c
h
2316.72 313.277 m
2316.72 368.57 2335.97 398.336 2369.57 398.336 c
2403.18 398.336 2421.38 369.625 2421.38 313.973 c
2421.38 258.668 2401.43 228.914 2368.53 228.914 c
2335.28 228.914 2316.72 257.613 2316.72 313.277 c
f
2455.34 233.465 m
2455.34 369.625 l
2439.23 371.383 l
2439.23 388.18 l
2455.34 394.48 l
2455.34 424.586 l
2455.34 466.59 2472.49 477.086 2491.74 477.086 c
2499.44 477.086 2506.79 474.645 2514.15 470.094 c
2509.24 447.34 l
2504.34 451.188 2499.44 453.98 2494.89 453.98 c
2486.14 453.98 2480.19 447.691 2480.19 427.027 c
2480.19 393.785 l
2508.89 393.785 l
2507.49 371.383 l
2480.19 371.383 l
2480.19 233.465 l
2455.34 233.465 l
f
2638.39 411.988 m
2618.09 313.973 l
2658.7 313.973 l
2638.39 411.988 l
h
2675.14 233.465 m
2663.6 289.82 l
2613.19 289.82 l
2601.64 233.465 l
2575.03 233.465 l
2624.04 452.242 l
2652.74 452.242 l
2701.75 233.465 l
2675.14 233.465 l
f
2729.39 233.465 m
2729.39 393.082 l
2754.24 397.633 l
2754.24 369.273 l
2759.85 387.477 2769.29 398.336 2782.25 398.336 c
2788.55 398.336 2794.5 395.184 2799.4 390.973 c
2794.15 365.074 l
2789.95 368.922 2785.04 372.781 2779.8 372.781 c
2770.7 372.781 2761.24 359.129 2754.24 334.273 c
2754.24 233.465 l
2729.39 233.465 l
f
2891.1 236.266 m
2884.45 231.715 2874.99 228.914 2867.99 228.914 c
2850.14 228.914 2832.99 238.016 2832.99 278.621 c
2832.99 369.625 l
2816.89 371.383 l
2816.89 388.18 l
2832.99 394.48 l
2832.99 430.535 l
2857.85 430.535 l
2857.85 393.785 l
2890.05 393.785 l
2888.65 371.383 l
2857.85 371.383 l
2857.85 276.168 l
2857.85 257.613 2864.15 251.668 2872.19 251.668 c
2877.45 251.668 2883.74 255.172 2887.94 259.02 c
2891.1 236.266 l
f
2915.93 263.57 m
2925.39 255.867 2935.53 250.965 2945.69 250.965 c
2958.99 250.965 2967.04 260.77 2967.04 273.719 c
2967.04 286.668 2960.04 295.426 2943.24 305.223 c
2922.58 317.477 2910.34 331.824 2910.34 354.93 c
2910.34 380.828 2929.94 398.336 2954.44 398.336 c
2967.39 398.336 2979.29 393.082 2986.99 387.477 c
2981.74 365.074 l
2972.99 371.383 2963.89 375.934 2954.09 375.934 c
2942.53 375.934 2934.14 368.23 2934.14 355.27 c
2934.14 343.023 2939.39 334.977 2956.54 324.469 c
2976.84 311.871 2990.84 297.516 2990.84 274.07 c
2990.84 247.117 2971.24 228.914 2946.39 228.914 c
2933.43 228.914 2920.13 233.816 2910.69 241.168 c
2915.93 263.57 l
f
[/Separation (LW C=0 M=27 Y=85 K=0) /DeviceCMYK
{dup 0 mul exch dup 0.27 mul exch dup 0.85 mul exch 0 mul }
] {} cs
[1] sc
[1] sc
1309.42 233.457 m
1309.42 233.457 l
1293.77 233.457 1281.08 246.148 1281.08 261.805 c
1281.08 423.715 l
1281.08 439.367 1293.77 452.059 1309.42 452.059 c
1325.08 452.059 1337.77 439.367 1337.77 423.715 c
1337.77 261.805 l
1337.77 246.148 1325.08 233.457 1309.42 233.457 c
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
